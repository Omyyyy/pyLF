
from numba import jit, njit
import numpy as np
from numba.core.errors import NumbaDeprecationWarning, NumbaPendingDeprecationWarning
import warnings
warnings.filterwarnings("ignore")
class math:
    def Pi():
        return 3.141592
    def E():
        return 2.718281
    def Tau():
        return 6.283185
    def Infinity():
        return float("inf")
    def Factors(x):
        if x<=0:
            return None
        factors = [i for i in range(1, x + 1) if x % i == 0]
        if len(factors) == 0:
            return [0]
        else:
            return factors
    def isTriangular(n: int):
        if n==0 or n==1:
            return True
        triangular_sum = 0
        for i in range(n):
            triangular_sum += i
            if triangular_sum == n:
                return True
            if i == n:
                return False
    def isPrime(n):
        if n == 2 or n == 3:
            return True
        if n % 2 == 0 or n < 2:
            return False
        for i in range(3, int(n**0.5)+1, 2):
            if n % i == 0:
                return False
        return True
    def isPythagoreanTriplet(a, b, c):
        return a**2 + b**2 == c**2
    def Factorial(n):
        fact = 1
        for i in range(1, int(n) + 1):
            fact = fact * i
        return fact
    def Radians(n):
        return pymaths.radians(n)
    def degSin(n):
        return pymaths.sin(pymaths.radians(n))
    def degCos(n):
        return pymaths.cos(pymaths.radians(n))
    def degTan(n):
        return pymaths.tan(pymaths.radians(n))
    def Sin(n):
        return pymaths.sin(n)
    def Cos(n):
        return pymaths.cos(n)
    def Tan(n):
        return pymaths.tan(n)
    def arcSin(n):
        return pymaths.asin(n)
    def arcCos(n):
        return pymaths.acos(n)
    def arcTan(n):
        return pymaths.atan(n)
    def degArcSin(n):
        return pymaths.asin(pymaths.radians(n))
    def degArcCos(n):
        return pymaths.acos(pymaths.radians(n))
    def degArcTan(n):
        return pymaths.atan(pymaths.radians(n))
    def Sqrt(n):
        return round(int(n) ** (1/2), 7)
    def Cbrt(n):
        return round(int(n) ** (1/3), 7)
    def Exp(n):
        return math.E() ** n
